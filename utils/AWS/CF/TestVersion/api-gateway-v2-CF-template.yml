AWSTemplateFormatVersion: '2010-09-09'
Description: |
  API for Lambda testing


Parameters:
  CognitoCallBackUrl:
    Type: String
    Default: http://localhost
  CognitoLogOutUrl:
    Type: String
    Default: http://localhost
  CognitoDomain:
    Type: String
    Default: amplifytestappdomain

Resources:
#----------------------------------API-----------------------------------
  MyAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Description: Example HTTP API
      Name: api-with-auth
      ProtocolType: HTTP
      # Target: !GetAtt MyLambdaFunction.Arn
      CorsConfiguration:
        AllowHeaders: 
          - '*'
        AllowMethods: 
          - '*'
        AllowOrigins: 
          - '*' # !!!!

  TestIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref MyAPI
      IntegrationMethod: 'POST'
      IntegrationType: 'AWS_PROXY'
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'


  TestPOSTRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref MyAPI
      #AuthorizationType: JWT
      #AuthorizerId: !Ref JWTAuthorizer
      OperationName: 'test-op'
      RouteKey: 'POST /test'
      Target: !Join 
        - /
        - - integrations
          - !Ref TestIntegration


  TestDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties: 
      ApiId: !Ref MyAPI
      Description: 'First deployment'
      StageName: 'dev'
    DependsOn: 
      - TestStage
      - TestPOSTRoute
    

  TestStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties: 
      ApiId: !Ref MyAPI
      AutoDeploy: false
      # DeploymentId: !Ref TestDeployment
      Description: 'test stage for dev'
      StageName: 'dev'

#  JWTAuthorizer:
#    Type: AWS::ApiGatewayV2::Authorizer
#    Properties:
#      ApiId: !Ref MyAPI
#      AuthorizerType: JWT
#      IdentitySource:
#        - '$request.querystring.access_token'
#      JwtConfiguration:
#        Audience:
#        - !Ref AppClient
#        Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
#      Name: test-jwt-authorizer

#----------------------------------BACKEND-----------------------------------
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          import json

          def lambda_handler(event, context):
              print(event)

              response_body = {
                  'raw path': event.get('rawPath'),
                  'rawQueryString': event.get('rawQueryString'),
                  'queryStringParameters': event.get('queryStringParameters')
              }

              response = {
                  'statusCode': 200,
                  'body': json.dumps(response_body),
              }
              return response;
  #--------------------------------Roles-----------------------------------
  APIInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/$default/test
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
#--------------------------------Cognito---------------------------------
#  UserPool:
#    Type: AWS::Cognito::UserPool
#    Properties:
#      UserPoolName: http-api-user-pool
#      AutoVerifiedAttributes:
#        - email
#      Schema:
#        # - Name: name
#        #   AttributeDataType: String
#        #   Mutable: true
#        #   Required: true
#        - Name: email
#          AttributeDataType: String
#          Mutable: false
#          Required: true
#  AppClient:
#    Type: AWS::Cognito::UserPoolClient
#    Properties:
#      AllowedOAuthFlows:
#        - implicit
#      AllowedOAuthScopes:
#        - aws.cognito.signin.user.admin
#        - email
#        - openid
#        - profile
#      AllowedOAuthFlowsUserPoolClient: true
#      ClientName: api-app-client
#      CallbackURLs:
#        - !Ref CognitoCallBackUrl
#      LogoutURLs:
#        - !Ref CognitoLogOutUrl
#      ExplicitAuthFlows:
#        # - ALLOW_ADMIN_USER_PASSWORD_AUTH
#        # - ALLOW_CUSTOM_AUTH
#        - ALLOW_USER_PASSWORD_AUTH
#        # - ALLOW_USER_SRP_AUTH
#        - ALLOW_REFRESH_TOKEN_AUTH
#      UserPoolId: !Ref UserPool
#      SupportedIdentityProviders:
#        - COGNITO
#   HostedUI:
#     Type: AWS::Cognito::UserPoolDomain
#     Properties:
#       Domain: !Ref CognitoDomain
#       UserPoolId: !Ref UserPool
# Outputs:
#   SignupURL:
#     Value: !Sub https://${HostedUI}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${AppClient}&response_type=token&scope=email+profile&redirect_uri=${CognitoCallBackUrl}