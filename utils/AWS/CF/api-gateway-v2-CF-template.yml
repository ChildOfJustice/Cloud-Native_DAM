AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Example HTTP API with a JWT authorizer. This template includes a Cognito user pool as the issuer for the JWT authorizer 
  and a Cognito app client as the audience for the authorizer. The outputs include a URL for a Cognito hosted UI where clients can 
  sign up and sign in to receive a JWT. After a client signs in, the client is redirected to your HTTP API with an access token 
  in the URL. To invoke the API with the access token, change the '#' in the URL to a '?' to use the token as a query string parameter.


Parameters:
  CognitoCallBackUrl:
    Type: String
    Default: http://localhost
  CognitoLogOutUrl:
    Type: String
    Default: http://localhost
  CognitoDomain:
    Type: String
    Default: amplifytestappdomain

Resources:
#----------------------------------Amplify-----------------------------------
# Type: AWS::Amplify::App
# Properties: 
#   Name: amplifytestapp
#   OauthToken: String
#   Repository: String
#   Tags: 
#     - Tag
# Type: AWS::Amplify::Branch
# Properties: 
#   AppId: String
#   BasicAuthConfig: 
#     BasicAuthConfig
#   BranchName: String
#   BuildSpec: String
#   Description: String
#   EnableAutoBuild: Boolean
#   EnablePerformanceMode: Boolean
#   EnablePullRequestPreview: Boolean
#   EnvironmentVariables: 
#     - EnvironmentVariable
#   PullRequestEnvironmentName: String
#   Stage: String
#   Tags: 
#     - Tag
#----------------------------------API-----------------------------------
  MyAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Description: Example HTTP API
      Name: api-with-auth
      ProtocolType: HTTP
      # Target: !GetAtt MyLambdaFunction.Arn
      CorsConfiguration:
        AllowHeaders: 
          - '*'
        AllowMethods: 
          - '*'
        AllowOrigins: 
          - !Ref CognitoCallBackUrl

  TestIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties: 
      ApiId: !Ref MyAPI
      IntegrationMethod: 'POST'
      IntegrationType: 'AWS_PROXY'
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'


  TestPOSTRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref MyAPI
      AuthorizationType: JWT
      AuthorizerId: !Ref JWTAuthorizer
      OperationName: 'test-op'
      RouteKey: 'POST /test'
      Target: !Join 
        - /
        - - integrations
          - !Ref TestIntegration


  TestDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties: 
      ApiId: !Ref MyAPI
      Description: 'First deployment'
      StageName: 'dev'
    DependsOn: 
      - TestStage
      - TestPOSTRoute
    

  TestStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties: 
      ApiId: !Ref MyAPI
      AutoDeploy: false
      # DeploymentId: !Ref TestDeployment
      Description: 'test stage for dev'
      StageName: 'dev'

  # DefaultRouteOverrides:
  #   Type: AWS::ApiGatewayV2::ApiGatewayManagedOverrides
  #   Properties: 
  #     ApiId: !Ref MyAPI
  #     Route: 
  #       AuthorizationType: JWT
  #       AuthorizerId: !Ref JWTAuthorizer

  JWTAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties: 
      ApiId: !Ref MyAPI
      AuthorizerType: JWT
      IdentitySource: 
        - '$request.querystring.access_token'
      JwtConfiguration: 
        Audience: 
        - !Ref AppClient
        Issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
      Name: test-jwt-authorizer

#----------------------------------BACKEND-----------------------------------
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from the ' + event.routeKey + ' route!'),
              };
              return response;
          };
  #--------------------------------Roles-----------------------------------
  APIInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/$default/test
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
#--------------------------------Cognito---------------------------------
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: http-api-user-pool
      AutoVerifiedAttributes:
        - email
      Schema:
        # - Name: name
        #   AttributeDataType: String
        #   Mutable: true
        #   Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
  AppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows: 
        - implicit
      AllowedOAuthScopes: 
        - aws.cognito.signin.user.admin
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      ClientName: api-app-client
      CallbackURLs:
        - !Ref CognitoCallBackUrl
      LogoutURLs:
        - !Ref CognitoLogOutUrl
      ExplicitAuthFlows:
        # - ALLOW_ADMIN_USER_PASSWORD_AUTH
        # - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        # - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - COGNITO 
   HostedUI:
     Type: AWS::Cognito::UserPoolDomain
     Properties:
       Domain: !Ref CognitoDomain
       UserPoolId: !Ref UserPool
 Outputs:
   SignupURL:
     Value: !Sub https://${HostedUI}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${AppClient}&response_type=token&scope=email+profile&redirect_uri=${CognitoCallBackUrl}