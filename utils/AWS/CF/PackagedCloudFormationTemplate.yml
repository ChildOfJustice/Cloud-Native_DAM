AWSTemplateFormatVersion: '2010-09-09'
Description: "Example HTTP API with a JWT authorizer. This template includes a Cognito\
  \ user pool as the issuer for the JWT authorizer \nand a Cognito app client as the\
  \ audience for the authorizer. The outputs include a URL for a Cognito hosted UI\
  \ where clients can \nsign up and sign in to receive a JWT. After a client signs\
  \ in, the client is redirected to your HTTP API with an access token \nin the URL.\
  \ To invoke the API with the access token, change the '#' in the URL to a '?' to\
  \ use the token as a query string parameter.\n"
Transform: AWS::Serverless-2016-10-31
Parameters:
  CognitoCallBackUrl:
    Type: String
    Default: http://localhost
  CognitoOriginUrl:
    Type: String
    Default: http://localhost
  CognitoLogOutUrl:
    Type: String
    Default: http://localhost
  CognitoDomain:
    Type: String
    Default: amplifytestappdomain
Resources:
  ProgrammaticUserForS3:
    Type: AWS::IAM::User
    Properties:
      Policies:
      - PolicyName: ManagerS3Policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:DeleteObjectTagging
            - s3:PutObject
            - s3:DeleteObject
            - s3:GetObject
            - s3:ReplicateTags
            - s3:PutObjectVersionTagging
            - s3:PutObjectTagging
            Resource:
              Fn::Sub:
              - ${bucketArn}/*
              - bucketArn:
                  Fn::GetAtt:
                  - StorageBucket
                  - Arn
      UserName: ManagerS3
  AccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: ProgrammaticUserForS3
  MyAPI:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Example HTTP API
      Name: api-with-auth
      ProtocolType: HTTP
      CorsConfiguration:
        AllowHeaders:
        - '*'
        AllowMethods:
        - '*'
        AllowOrigins:
        - Ref: CognitoOriginUrl
  TestIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyAPI
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'
  UsersIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyAPI
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'
  UsersDeleteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyAPI
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersDeleteLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'
  ClustersIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyAPI
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ClustersLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'
  ClustersDeleteIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyAPI
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ClustersDeleteLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'
  FilesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyAPI
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FilesLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'
  PermissionsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyAPI
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PermissionsLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'
  AdminIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: MyAPI
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AdminLambdaFunction.Arn}/invocations
      PayloadFormatVersion: '2.0'
  TestPOSTRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: test-op
      RouteKey: GET /test
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: TestIntegration
  UsersRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: users-post
      RouteKey: POST /users
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: UsersIntegration
  UsersDeleteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: users-delete
      RouteKey: DELETE /users
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: UsersDeleteIntegration
  ClustersPostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: clusters-post
      RouteKey: POST /clusters
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ClustersIntegration
  ClustersGetProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: clusters-get
      RouteKey: GET /clusters/{proxy+}
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ClustersIntegration
  ClustersGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: clusters-get
      RouteKey: GET /clusters
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ClustersIntegration
  ClustersDeleteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: clusters-delete
      RouteKey: DELETE /clusters/delete
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: ClustersDeleteIntegration
  FilesGetProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: files-get
      RouteKey: GET /files/{proxy+}
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: FilesIntegration
  FilesGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: files-get
      RouteKey: GET /files
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: FilesIntegration
  FilesPostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: files-post
      RouteKey: POST /files
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: FilesIntegration
  FilesDeleteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: files-delete
      RouteKey: DELETE /files
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: FilesIntegration
  PermissionsPostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: permissions-post
      RouteKey: POST /permissions
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: PermissionsIntegration
  PermissionsGetProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: permissions-get
      RouteKey: GET /permissions/{proxy+}
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: PermissionsIntegration
  PermissionsGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: permissions-get
      RouteKey: GET /permissions
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: PermissionsIntegration
  PermissionsDeleteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: permissions-delete
      RouteKey: DELETE /permissions
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: PermissionsIntegration
  AdminPostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizationType: JWT
      AuthorizerId:
        Ref: JWTAuthorizer
      OperationName: admin-post
      RouteKey: POST /admin
      Target:
        Fn::Join:
        - /
        - - integrations
          - Ref: AdminIntegration
  TestDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId:
        Ref: MyAPI
      Description: Default deployment
      StageName: $default
    DependsOn:
    - TestStage
    - TestPOSTRoute
    - UsersRoute
  TestStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: MyAPI
      AutoDeploy: true
      Description: default stage
      StageName: $default
  JWTAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId:
        Ref: MyAPI
      AuthorizerType: JWT
      IdentitySource:
      - $request.header.Authorization
      JwtConfiguration:
        Audience:
        - Ref: AppClient
        Issuer:
          Fn::Sub: https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
      Name: test-jwt-authorizer
  StorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: sardor-app-storage
      CorsConfiguration:
        CorsRules:
        - AllowedOrigins:
          - Ref: CognitoOriginUrl
          AllowedMethods:
          - POST
          - GET
          - PUT
          - DELETE
          - HEAD
          AllowedHeaders:
          - '*'
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CloudNativeDAM_DB
      AttributeDefinitions:
      - AttributeName: ID
        AttributeType: S
      - AttributeName: SK
        AttributeType: S
      - AttributeName: Data
        AttributeType: S
      KeySchema:
      - AttributeName: ID
        KeyType: HASH
      - AttributeName: SK
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: '1'
        WriteCapacityUnits: '1'
      GlobalSecondaryIndexes:
      - IndexName: Data-index
        KeySchema:
        - AttributeName: Data
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
      - IndexName: File-Clusters-index
        KeySchema:
        - AttributeName: SK
          KeyType: HASH
        - AttributeName: ID
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
  MyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - FunctionExecutionRole
        - Arn
      Handler: MyLambdaFunction.handler
      CodeUri: s3://sardor-test-code/399deb1ad4ca29bd99620f2b6977a320
  UsersLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - FunctionExecutionRole
        - Arn
      Handler: UsersHandler.handler
      CodeUri: s3://sardor-test-code/658eb1896035e9b4a7d5a1b45af85b72
  UsersDeleteLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - FunctionExecutionRole
        - Arn
      Handler: UsersDeleteHandler.handler
      CodeUri: s3://sardor-test-code/b867bebe4b965561fcee08c7db5283cc
  ClustersLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - FunctionExecutionRole
        - Arn
      Handler: ClustersHandler.handler
      CodeUri: s3://sardor-test-code/227bbaae783e20fc7bda008735068458
  ClustersDeleteLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - FunctionExecutionRole
        - Arn
      Handler: ClustersDeleteHandler.handler
      CodeUri: s3://sardor-test-code/530fbeab2df90a805feb696c6ade7585
  FilesLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - FunctionExecutionRole
        - Arn
      Handler: FilesHandler.handler
      CodeUri: s3://sardor-test-code/d3bdd05be3bb1fbdb56d6380dc091212
  PermissionsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - FunctionExecutionRole
        - Arn
      Handler: PermissionsHandler.handler
      CodeUri: s3://sardor-test-code/937c0feec1a7040f0f1440946940b479
  AdminLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - FunctionExecutionRole
        - Arn
      Handler: AdminHandler.handler
      CodeUri: s3://sardor-test-code/495aa55c30436b6d85d3fc4ccbb95e1e
  APIInvokeTestLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: MyLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/*
  APIInvokeUsersLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: UsersLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/*
  APIInvokeUsersDeleteLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: UsersDeleteLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/*
  APIInvokeClustersLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ClustersLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/*
  APIInvokeClustersDeleteLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: ClustersDeleteLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/*
  APIInvokeFilesLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: FilesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/*
  APIInvokePermissionsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: PermissionsLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/*
  APIInvokeAdminLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: AdminLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${MyAPI}/*
  LambdaDynamoDBWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:BatchWriteItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
          - dynamodb:DescribeTable
          - dynamodb:Query
          Resource:
          - arn:aws:dynamodb:eu-central-1:204713165914:table/CloudNativeDAM_DB
          - arn:aws:dynamodb:eu-central-1:204713165914:table/CloudNativeDAM_DB/index/*
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
      - Ref: LambdaDynamoDBWritePolicy
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: http-api-user-pool
      AutoVerifiedAttributes:
      - email
      AliasAttributes:
      - email
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true
  AppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
      - implicit
      AllowedOAuthScopes:
      - aws.cognito.signin.user.admin
      - email
      - openid
      - profile
      AllowedOAuthFlowsUserPoolClient: true
      ClientName: api-app-client
      CallbackURLs:
      - Ref: CognitoCallBackUrl
      LogoutURLs:
      - Ref: CognitoLogOutUrl
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true
      UserPoolId:
        Ref: UserPool
      SupportedIdentityProviders:
      - COGNITO
  HostedUI:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: CognitoDomain
      UserPoolId:
        Ref: UserPool
Outputs:
  SignupURL:
    Value:
      Fn::Sub: https://${HostedUI}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${AppClient}&response_type=token&scope=email+profile+aws.cognito.signin.user.admin&redirect_uri=${CognitoCallBackUrl}
  ApiEndpoint:
    Value:
      Fn::GetAtt:
      - MyAPI
      - ApiEndpoint
  AccessKeyId:
    Value:
      Ref: AccessKey
  SecretAccessKey:
    Value:
      Fn::GetAtt:
      - AccessKey
      - SecretAccessKey
